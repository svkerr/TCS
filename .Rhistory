}
hardware5
GenStats(hardware5,2)
GenStats(hardware3,2)
GenStats()
GenStats
GenStats(arrakisIdHours,3)
apply(arrakisIdHours[3], 2, max)
apply(arrakisIdHours[3], 2, max)/3600/24/365
apply(arrakisIdHours[2], 2, max)
apply(hardware5[3],2,mean)
hardware5
apply(hardware5[2],2, mean)
apply(hardware3[2],2, mean)
> confint <- function(x,alpha = 0.5) {
+     conflevel = (1 - alpha)*100
+     stderr <- sd(x)/sqrt(length(x))
+     tcrit <- qt(1 - alpha/2, length(x)-1)
+     margin <- stderr * tcrit
+     lower <- mean(x) - margin
+     upper <- mean(x) + margin
+     cat(conflevel, 'Percent Confidence Interval','\n')
+     cat('Mean:', mean(x), 'Std. Error:', stderr, '\n')
+     cat('Lower Limit:', lower, '\n')
+     cat('Upper Limit:', upper, '\n')
+ }
confint <- function(x,alpha = 0.5) {
+     conflevel = (1 - alpha)*100
+     stderr <- sd(x)/sqrt(length(x))
+     tcrit <- qt(1 - alpha/2, length(x)-1)
+     margin <- stderr * tcrit
+     lower <- mean(x) - margin
+     upper <- mean(x) + margin
+     cat(conflevel, 'Percent Confidence Interval','\n')
+     cat('Mean:', mean(x), 'Std. Error:', stderr, '\n')
+     cat('Lower Limit:', lower, '\n')
+     cat('Upper Limit:', upper, '\n')
+ }
confint <- function(x,alpha = 0.5) {
+     conflevel = (1 - alpha)*100
+     stderr <- sd(x)/sqrt(length(x))
+     tcrit <- qt(1 - alpha/2, length(x)-1)
+     margin <- stderr * tcrit
+     lower <- mean(x) - margin
+     upper <- mean(x) + margin
+     cat(conflevel, 'Percent Confidence Interval','\n')
+     cat('Mean:', mean(x), 'Std. Error:', stderr, '\n')
+     cat('Lower Limit:', lower, '\n')
+     cat('Upper Limit:', upper, '\n')
+ }
confint <- function(x,alpha = 0.5) {
+     conflevel = (1 - alpha)*100
+     stderr <- sd(x)/sqrt(length(x))
+     tcrit <- qt(1 - alpha/2, length(x)-1)
+     margin <- stderr * tcrit
+     lower <- mean(x) - margin
+     upper <- mean(x) + margin
+     cat(conflevel, 'Percent Confidence Interval','\n')
+     cat('Mean:', mean(x), 'Std. Error:', stderr, '\n')
+     cat('Lower Limit:', lower, '\n')
+     cat('Upper Limit:', upper, '\n')
}
confint <- function(x,alpha = 0.5) {
+     conflevel = (1 - alpha)*100
+     stderr <- sd(x)/sqrt(length(x))
+     tcrit <- qt(1 - alpha/2, length(x)-1)
+     margin <- stderr * tcrit
+     lower <- mean(x) - margin
+     upper <- mean(x) + margin
+     cat(conflevel, 'Percent Confidence Interval','\n')
+     cat('Mean:', mean(x), 'Std. Error:', stderr, '\n')
+     cat('Lower Limit:', lower, '\n')
+     cat('Upper Limit:', upper, '\n')}
hardware5
confint(hardware5[2])
confint <- function(x,alpha = 0.5) {
+     conflevel <- (1 - alpha)*100
+     stderr <- sd(x)/sqrt(length(x))
+     tcrit <- qt(1 - alpha/2, length(x)-1)
+     margin <- stderr * tcrit
+     lower <- mean(x) - margin
+     upper <- mean(x) + margin
+     cat(conflevel, 'Percent Confidence Interval','\n')
+     cat('Mean:', mean(x), 'Std. Error:', stderr, '\n')
+     cat('Lower Limit:', lower, '\n')
+     cat('Upper Limit:', upper, '\n')
+ }
confint <- function(x,alpha = 0.5) {
+     conflevel <- (1 - alpha)*100
+     stderr <- sd(x)/sqrt(length(x))
+     tcrit <- qt(1 - alpha/2, length(x)-1)
+     margin <- stderr * tcrit
+     lower <- mean(x) - margin
+     upper <- mean(x) + margin
+     cat(conflevel, 'Percent Confidence Interval','\n')
+     cat('Mean:', mean(x), 'Std. Error:', stderr, '\n')
+     cat('Lower Limit:', lower, '\n')
+     cat('Upper Limit:', upper, '\n')}
confint(hardware5[2])
upper <- mean(x) + margin
confint(hardware5[2])
confint <- function(x,alpha = 0.5) {
conflevel <- (1 - alpha)*100
stderr <- sd(x)/sqrt(length(x))
tcrit <- qt(1 - alpha/2, length(x)-1)
margin <- stderr * tcrit
lower <- mean(x) - margin
upper <- mean(x) + margin
cat(conflevel, 'Percent Confidence Interval','\n')
cat('Mean:', mean(x), 'Std. Error:', stderr, '\n')
cat('Lower Limit:', lower, '\n')
cat('Upper Limit:', upper, '\n')
}
confint(hardware5[2])
confint(hardware5[2])
confint <- function(x,alpha = 0.5) {
conflevel <- (1 - alpha)*100
stderr <- sapply(x,sd)/sqrt(length(x))
tcrit <- qt(1 - alpha/2, length(x)-1)
margin <- stderr * tcrit
lower <- sapply(x,mean) - margin
upper <- sapply(x,mean) + margin
cat(conflevel, 'Percent Confidence Interval','\n')
cat('Mean:', sapply(x,mean) 'Std. Error:', stderr, '\n')
cat('Lower Limit:', lower, '\n')
cat('Upper Limit:', upper, '\n')
}
confint <- function(x,alpha = 0.5) {
conflevel <- (1 - alpha)*100
stderr <- sapply(x,sd)/sqrt(length(x))
tcrit <- qt(1 - alpha/2, length(x)-1)
margin <- stderr * tcrit
lower <- sapply(x,mean) - margin
upper <- sapply(x,mean) + margin
cat(conflevel, 'Percent Confidence Interval','\n')
cat('Mean:', sapply(x,mean) 'Std. Error:', stderr, '\n')
cat('Lower Limit:', lower, '\n')
cat('Upper Limit:', upper, '\n') }
confint <- function(x,alpha = 0.5) {
conflevel <- (1 - alpha)*100
stderr <- sapply(x,sd)/sqrt(length(x))
tcrit <- qt(1 - alpha/2, length(x)-1)
margin <- stderr * tcrit
lower <- sapply(x,mean) - margin
upper <- sapply(x,mean) + margin
cat(conflevel, 'Percent Confidence Interval','\n')
cat('Mean:', sapply(x,mean), 'Std. Error:', stderr, '\n')
cat('Lower Limit:', lower, '\n')
cat('Upper Limit:', upper, '\n')
}
confint(hardware5[2])
confint <- function(x,alpha = 0.05) {
conflevel <- (1 - alpha)*100
stderr <- sapply(x,sd)/sqrt(length(x))
tcrit <- qt(1 - alpha/2, length(x)-1)
margin <- stderr * tcrit
lower <- sapply(x,mean) - margin
upper <- sapply(x,mean) + margin
cat(conflevel, 'Percent Confidence Interval','\n')
cat('Mean:', sapply(x,mean), 'Std. Error:', stderr, '\n')
cat('Lower Limit:', lower, '\n')
cat('Upper Limit:', upper, '\n')
}
confint(hardware5[2])
confint <- function(x,alpha = 0.05) {
conflevel <- (1 - alpha)*100
stderr <- sapply(x,sd)/sqrt(length(x))
tcrit <- qt(1 - alpha/2, length(x)-1)
margin <- stderr * tcrit
lower <- (sapply(x,mean)) - margin
upper <- (sapply(x,mean)) + margin
cat(conflevel, 'Percent Confidence Interval','\n')
cat('Mean:', sapply(x,mean), 'Std. Error:', stderr, '\n')
cat('Lower Limit:', lower, '\n')
cat('Upper Limit:', upper, '\n')
}
confint(hardware5[2])
confint <- function(x,alpha = 0.05) {
conflevel <- (1 - alpha)*100
stderr <- sapply(x,sd)/sqrt(length(x))
tcrit <- qt(1 - alpha/2, length(x)-1)
margin <- stderr * tcrit
lower <- (sapply(x,mean)) - margin
upper <- (sapply(x,mean)) + margin
cat(conflevel, 'Percent Confidence Interval','\n')
cat('Mean:', sapply(x,mean), 'Std. Error:', stderr, '\n')
cat('Lower Limit:', lower, '\n')
cat('Upper Limit:', upper, '\n')
length(x)
}
confint(hardware5[2])
hardware5
length(hardware5[2])
cat(hardware5[2])
hardware5[2]
attach(dataset)
load("/Users/stuart/R_Files/Beginning R Data/dataset.rda")
dataset.rda
attach("/Users/stuart/R_Files/Beginning R Data/dataset.rda")
confint(Age)
load("/Users/stuart/R_Files/Beginning R Data/dataset.rda")
dataset
confint(Age)
confint(dataset$age)
confint(dataset$Age)
confint <- function(x,alpha = 0.05) {
conflevel <- (1 - alpha)*100
stderr <- sapply(x,sd)/sqrt(length(x))
tcrit <- qt(1 - alpha/2, length(x)-1)
margin <- stderr * tcrit
lower <- (apply(x,mean)) - margin
upper <- (apply(x,mean)) + margin
cat(conflevel, 'Percent Confidence Interval','\n')
cat('Mean:', apply(x,mean), 'Std. Error:', stderr, '\n')
cat('Lower Limit:', lower, '\n')
cat('Upper Limit:', upper, '\n')
length(x)
}
confint(dataset$Age)
confint <- function(x,alpha = 0.05) {
conflevel <- (1 - alpha)*100
stderr <- sd(x)/sqrt(length(x))
tcrit <- qt(1 - alpha/2, length(x)-1)
margin <- stderr * tcrit
lower <- mean(x) - margin
upper <- mean(x) + margin
cat(conflevel, 'Percent Confidence Interval','\n')
cat('Mean:', mean(x), 'Std. Error:', stderr, '\n')
cat('Lower Limit:', lower, '\n')
cat('Upper Limit:', upper, '\n')
length(x)
}
confint(dataset$Age)
arrakisHours5
hardware5
head(hardware5)
confint(hardware5$Sum.of.Net.Price)
apply(hardware5$Sum.of.Net.Price,2,mean)
apply(hardware5[2],2,mean)
fix(GenStats)
fix(GenStats)
GenStats(arrakisIdHours,3)
function(x,column) {
theMean <- apply(x[column],2,mean)
stanDev <- apply(x[column],2,sd)
meanAbsDev <- apply(x[column],2,mad)
MIN <- apply(x[column],2,min)
MAX <- apply(x[column],2,max)
cat('Mean: ',theMean,'\n')
cat('Min: ', MIN,'\n')
cat('Max: ', MAX,'\n')
cat('SD: ', stanDev,'\n')
cat('MAD: ',meanAbsDev,'\n')
}
GenStats(arrakisIdHours,3)
GenStats <- function(x,column) {
theMean <- apply(x[column],2,mean)
stanDev <- apply(x[column],2,sd)
meanAbsDev <- apply(x[column],2,mad)
MIN <- apply(x[column],2,min)
MAX <- apply(x[column],2,max)
cat('Mean: ',theMean,'\n')
cat('Min: ', MIN,'\n')
cat('Max: ', MAX,'\n')
cat('SD: ', stanDev,'\n')
cat('MAD: ',meanAbsDev,'\n')
}
GenStats(arrakisIdHours,3)
apply(arrakisIdHours[3],2,max)
apply(arrakisIdHours[3],2,max)/3600/24/365
x <- -5:5
sqrt(x)
ifelse():
sqrt(ifelse(x>= 0,x, NA))
sqrt(ifelse( x>=0, x, NA))
x <- 2491
limit <- trun(sqrt(x)+1)
limit <- trunc(sqrt(x)+1)
limit
testvector <- 2:limit
testvector
x %% testvector
x/47
any(x %% testvector == 0)
results <- x %% testvector
which(results == 0)
testvector[46]
summary(hardware5)
summary(hardware5[2])
hardware5
mean(hardware5$Sum.of.Net.Price, trim = .5)
ls.str()
arrakisIdHours
GenStats(arrakisIdHours,3)
a <- c(150000,300000,900000,1200000)
a * 0.06
a <- c(150000,300000,600000, 900000,1200000)
a * 0.06
(50000 + 5000)/2
mean(arrakisIdHours[3], trim = 0.05)
colMeans(arrakisIdHours[3], trim = 0.05)
mode(arrakisIdHours)
apply(arrakisIdHours[3],2,median)
GenStats <- function(x,column) {
theMean <- apply(x[column],2,mean)
stanDev <- apply(x[column],2,sd)
median <- apply(x[column],2,median)
meanAbsDev <- apply(x[column],2,mad)
MIN <- apply(x[column],2,min)
MAX <- apply(x[column],2,max)
cat('Mean: ',theMean,'\n')
cat('Min: ', MIN,'\n')
cat('Max: ', MAX,'\n')
cat('SD: ', stanDev,'\n')
cat('Median',median,'\n')
cat('MAD: ',meanAbsDev,'\n')
}
GenStats(arrakisIdHours,3)
GenStats <- function(x,column) {
theMean <- apply(x[column],2,mean)
stanDev <- apply(x[column],2,sd)
median <- apply(x[column],2,median)
meanAbsDev <- apply(x[column],2,mad)
MIN <- apply(x[column],2,min)
MAX <- apply(x[column],2,max)
cat('Min: ', MIN,'\n')
cat('Max: ', MAX,'\n')
cat('Mean: ',theMean,'\n')
cat('Median',median,'\n')
cat('SD: ', stanDev,'\n')
cat('MAD: ',meanAbsDev,'\n')
}
GenStats(arrakisIdHours,3)
usevector <- arrakisIdHours[3]
usevector
mean(usevector, trim = .05)
sapply(usevector,(mean, trim = 0.05))
list(usevector)
newvector <- list(usevector)
mean(newvector, trim = 0.05)
apply(arrakisIdHours[3], 2 quantile)
apply(arrakisIdHours[3], 2, quantile)
apply(arrakisIdHours[3],2,median)
quantile(arrakisIdHours:wallclock, 0.90)
quantile(arrakisIdHours$wallclock, 0.90)
quantile(arrakisIdHours$wallclock, 0.95)
GenStats(arrakisIdHours,3)
manticoreHours
zscores <- scale(arrakisIdHours$wallclock)
zscores
tail(zscores)
sort(zscores)
print(sort(zscores))
cat(sort(zscores))
var(arrakisIdHours$wallclock)
sd(arrakisIdHours$wallclock)
apply(arrakisIdHours[3], sd)
apply(arrakisIdHours[3], 2, sd)
hist(arrakisIdHours$wallclock)
manticorehours
manticoreHours
hist(manticoreHours$CPU.Hours)
arrakisHours
GenStats(arrakisHours$CPU.Hours,3)
summary(arrakisHours[3])
rm(newvector)
rm(usevector)
(sd(manticoreHours$wallclock)/mean(manticoreHours$wallclock))
sd(manticoreHours$wallclock)
manticoreHours
sd(manticoreHours$CPU.Hours)
(sd(manticoreHours$CPU.Hours)/mean(manticoreHours$CPU.Hours))
(sd(arrakisHours$CPU.Hours)/mean(arrakisHours$CPU.Hours))
cbind(dbinom(x,size = 5, prob = 0.5))
x <- c(0:6)
x
cbind(dbinom(x,size = 5, prob = 0.5))
x<- c(1:6)
cbind(dbinom(x,size = 5, prob = 0.5))
dbinom(8,size = 10, prob = 0.76)
dbinom(10, size = 10, prob = 0.76)
xvec <- c(0:6)
sum(dbinom(xvec, size=10, prob = 0.76))
dbinom(1, size = 10, prob = 0.76)
dbinom(1, size = 10, prob = 0.76)
xvec <- c(1:10)
cbind(dbinom(xvec, size=10, prob = 0.76))
sum(dbinom(xvec, size=10, prob = 0.76))
pnum(6, 10, 0.76)
pbinom(6, 10, 0.76)
sum(dbinom(c(1:6), size=10, prob = 0.76))
sum(dbinom(c(0:6), size=10, prob = 0.76))
x <- c(0:10)
x
prob <- dbinom(x, 10, 0.5)
plot(x, prob, type = 'x', main = 'Binomial Approximates Normal')
plot(x, prob, type = 'o', main = 'Binomial Approximates Normal')
x <- c(0:100)
plot(x, prob, type = 'o', main = 'Binomial Approximates Normal')
prob <- dbinom(x, 10, 0.5)
plot(x, prob, type = 'o', main = 'Binomial Approximates Normal')
prob <- dbinom(x, 100, 0.5)
plot(x, prob, type = 'o', main = 'Binomial Approximates Normal')
xaxis <- seq(0, 40, 0.5)
xaxis
y1 <- dnorm(xaxis, 20, 6)
y2 <- dnorm(xaxis, 20, 3)
plot(xaxis, y2, type='1', main='Comparing 2 Normal Distributions')
plot(xaxis, y2, type = '1', main = 'Comparing 2 Normal Distributions')
plot(xaxis, y2, type = 'l', main = 'Comparing 2 Normal Distributions')
points(xaxis, y1, type = 'l', col = 'red')
pnorm(1.96)
pnorm(2)
pnorm(3)
1- pnorm(1.96)
?Scale
Scale(720,500,100)
scale(720,500,100)
pnorm(2.2)
quantile(arrakisIdHours:wallclock, 0.90)
quantile(arrakisIdHours$wallclock, 0.90)
quantile(arrakisIdHours$wallclock, 0.25)
quantile(arrakisIdHours$wallclock, 0.5)
quantile(arrakisIdHours$wallclock, 0.75)
quantile(arrakisIdHours$wallclock, 0.95)
quantile(arrakisIdHours$wallclock, 0.99)
apply(arrakisIdHours$wallclock,max)
apply(arrakisIdHours$wallclock,2,max)
apply(arrakisIdHours,2,max)
356747081/24/365
356747081/60/60/24/365
apply(arrakisIdHours,2,min)
21310/3600
apply(arrakisIdHours,2,tail)
apply(arrakisIdHours,2,head)
dump <- print(arrakisIdHours)
dump
rm dump
rm(dump)
GenStats(arrakisIdHours,3)
rstudio::viewData(hardware3)
zscores <- scale(arrakisIdHours$wallclock)
zscores
cat(sort(zscores))
GenStats(arrakisHours$CPU.Hours,3)
hist(manticoreHours$CPU.Hours)
manticoreHours
apply(arrakisIdHours[3], 2 quantile)
apply(arrakisIdHours[3], 2, quantile)
hist(manticoreHours$CPU.Hours)
zscores <- scale(arrakisIdHours$wallclock)
zscores
tail(arrakisIdHours)
hist(arrakisIdHours$cores)
GenStats(arrakisIdHours,2)
head(arrakisIdHours)
manticoreHours
sapply(manticoreHours,class)
hardware5
search()
datasets
?datasets
library(help="datasets")
load(faithful)
head(faithful)
head(co2)
head(islands)
head(precip)
tail(precip)
precip(1:5)
precip[1:5]
precip[1:50]
str(precip)
data("Cars93", MASS)
data(Cars93, Package="MASS")
data(Cars93, package="MASS")
head(Cars93)
summary(Cars93)
library
library()
Sys.getenv("Shell")
Sys.getEnv("Shell")
Sys.getenv("SHELL")
Sys.getenv(" R_HOME")
Sys.getenv(" R_HOME")
summary(arrakisIDHours)
summary(arrakisIdHours)
mean(arrakisIdHours$wallclock < 10000)
length(arrakisIdHours$wallclock)
str(arrakisIdHours)
arrakisIdHours_ranked <- arrakisIdHours[order(arrakisIdHours$wallclock),]
tail(arrakisIdHours_ranked)
$quantile
?quantile
quantile(arrakisIdHours_ranked$wallclock, 0.99)
quantile(arrakisIdHours_ranked$wallclock, 0.95)
21310/60/60/24
21310/60/60
quantile(arrakisIdHours_ranked$wallclock, 0.25)
quantile(arrakisIdHours_ranked$wallclock, 0.50)
9790/60/60
colSums(arrakisIdHours)
1922151262/60/60
1922151262/60/60/24
1922151262/60/60/24/365
1440*60*60*24
str(dataset)
manticoreHours
summary(manticoreHours)
1440*60
1440*60*60*24*91
license()
